name: Deploy VG Language Documentation
on:
  push:
    branches:
      - master
      - main
permissions:
  contents: write
jobs:
  deploy-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # Debug: List directory contents
      - name: Debug - List repository contents
        run: |
          echo "=== Repository root ==="
          ls -la
          echo "=== docs directory ==="
          ls -la docs/
      
      # Build Documentation
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install MkDocs dependencies
        run: |
          pip install mkdocs-material
          pip install pillow cairosvg
      - name: Debug - Check mkdocs.yml
        run: |
          echo "=== Checking mkdocs.yml ==="
          cat mkdocs.yml
      - name: Build documentation
        run: |
          echo "=== Building documentation ==="
          mkdocs build --verbose
      - name: Debug - Check docs build
        run: |
          echo "=== Checking docs build ==="
          ls -la
          if [ -d "site" ]; then
            echo "site exists"
            ls -la site/
          else
            echo "site does not exist"
            echo "Checking if site directory was created elsewhere:"
            find . -name "site" -type d 2>/dev/null || echo "No site directory found"
          fi
      
      # Organize files for deployment
      - name: Organize deployment files
        run: |
          # Create deployment directory
          mkdir -p deploy
          
          # Copy documentation (root) - use site folder directly
          echo "Copying site to deploy/"
          if [ -d "site" ]; then
            cp -r site/* deploy/
          else
            echo "ERROR: site does not exist!"
            exit 1
          fi
          
          # Copy CNAME files - with error checking
          if [ -f "CNAME" ]; then
            cp CNAME deploy/
          else
            echo "WARNING: CNAME not found"
          fi
          
          echo "=== Final deployment structure ==="
          ls -la deploy/
      
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy
          destination_dir: .
          force_orphan: true 
