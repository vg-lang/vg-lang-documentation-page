{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the VG Language Documentation! \ud83c\udf89</p> <p>VG Language is a lightweight, expressive programming language designed for simplicity and ease of use. Whether you're a beginner or an experienced developer, VG Language provides an intuitive syntax for efficient coding.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Simple and readable syntax - Easy to learn and write.</li> <li>Support for variables, constants, and arrays - Store and manipulate data effortlessly.</li> <li>Control flow with if statements and loops - Make decisions and repeat tasks efficiently.</li> <li>Built-in print functionality \u2013 Quickly display output for debugging and results.</li> <li>Commenting system \u2013 Add notes to your code for clarity and documentation.</li> <li>Functions \u2013 Define reusable blocks of code to organize and simplify your programs.</li> </ul>"},{"location":"#get-started-now","title":"Get Started Now! \u2b07\ufe0f","text":"<p>Click the button below to download the latest version of VG Language and start coding today!</p> <p></p>"},{"location":"Arrays/","title":"Arrays in VG Language","text":"<p>Arrays in VG Language store multiple values in a single variable. They can hold different data types, and they support both one-dimensional and nested arrays.</p>"},{"location":"Arrays/#one-dimensional-arrays","title":"One-Dimensional Arrays","text":"<p>A simple array stores elements of any type:</p> <pre><code>var numbers = [1, 2, 3, 4, 5];\nprint(numbers[2]); ## Output: 3\n\nvar names = [\"Alice\", \"Bob\", \"Charlie\"];\nprint(names[0]); ## Output: Alice\n\nvar mixed = [10, \"Hello\", true, 3.14];\nprint(mixed[1]); ## Output: Hello\n</code></pre>"},{"location":"Arrays/#nested-arrays","title":"Nested Arrays","text":"<pre><code>var matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nprint(matrix[1][2]); ## Output: 6\n\nvar complexArray = [\n    [\"Alice\", 25, true],\n    [\"Bob\", 30, false]\n];\n\nprint(complexArray[0][0]); ## Output: Alice\nprint(complexArray[1][1]); ## Output: 30\n</code></pre>"},{"location":"Arrays/#modifying-arrays","title":"Modifying Arrays","text":"<pre><code>var items = [\"apple\", \"banana\", \"cherry\"];\nitems[1] = \"blueberry\";\n\nprint(items); ## Output: [\"apple\", \"blueberry\", \"cherry\"]\n</code></pre>"},{"location":"Commands/","title":"VG Language Commands","text":"<p>VG Language provides a command-line interface (CLI) for running <code>.vg</code> scripts.</p>"},{"location":"Commands/#usage","title":"Usage","text":"<p>To execute a VG script, use:</p> <pre><code>vg &lt;file.vg&gt; [options]\n</code></pre>"},{"location":"Commands/#help-command","title":"Help Command","text":"<p>To display the help command, use:</p> <p><pre><code>vg --help\n</code></pre> that would display the following: <pre><code>Usage: vg &lt;file.vg&gt; [options]\nOptions:\n  --help        Show this help menu\n  &lt;file.vg&gt;     The VG source file to interpret\n</code></pre></p>"},{"location":"Comments/","title":"Comments in VG Language","text":"<p>Comments are used to add explanatory notes or disable parts of the code. VG Language supports single-line and multi-line comments.</p>"},{"location":"Comments/#single-line-comments","title":"Single-Line Comments","text":"<p>A single-line comment begins with <code>##</code> and continues to the end of the line:</p> <pre><code>## This is a single-line comment\nvar x = 10;  ## Variable declaration\n\n/# This is a\nmulti-line comment\nspanning multiple lines\n#/\n\nvar y = 20;\n</code></pre>"},{"location":"Constants/","title":"Constants in VG Language","text":"<p>Constants are similar to variables, but their values cannot be changed once they are assigned. You declare a constant using the <code>const</code> keyword.</p>"},{"location":"Constants/#declaring-constants","title":"Declaring Constants","text":"<p>To declare a constant, use the <code>const</code> keyword followed by the name and value:</p> <pre><code>const PI = 3.14159;\nconst MAX_VALUE = 100;\n</code></pre>"},{"location":"Constants/#constant-types","title":"Constant Types","text":"<p>Like variables, constants can have various data types:</p> <ul> <li>Integers: Whole numbers (e.g., 100, -50)</li> <li>Doubles: Decimal numbers (e.g., 3.14, 2.71)</li> <li>Strings: Text (e.g., \"Hello, world!\")</li> <li>Booleans: true or false <pre><code>const greeting = \"Hello, VG!\"; ## String constant\nconst maxAge = 100;            ## Integer constant\n</code></pre></li> </ul>"},{"location":"Constants/#why-use-constants","title":"Why Use Constants?","text":"<ul> <li>Constants are useful when you need a value that should remain unchanged throughout the program (e.g., mathematical constants like PI, or configuration values like MAX_VALUE).</li> <li>Declaring values as constants helps to prevent accidental changes and makes the code more readable.</li> </ul>"},{"location":"DocumentationGenerator/","title":"Documentation Generator","text":"<p>VG Language includes a documentation generator that can create documentation from your code comments.</p>"},{"location":"DocumentationGenerator/#comment-format","title":"Comment Format","text":"<p>VG Language supports special documentation comments that can be processed by the documentation generator:</p> <pre><code>/## This is a documentation comment.\n# It can span multiple lines.\n# @param name Description of the parameter\n# @return Description of the return value\n# @author Author name\n##/\nfunction myFunction(name) {\n    return \"Hello, \" + name;\n}\n</code></pre>"},{"location":"DocumentationGenerator/#running-the-documentation-generator","title":"Running the Documentation Generator","text":"<p>The documentation generator can be run using:</p> <pre><code>vg --doc myfile.vg\n</code></pre> <p>This will generate documentation in Markdown format based on the documentation comments in your code.</p> <p>To generate documentation for an entire directory:</p> <pre><code>vg --doc myproject/\n</code></pre>"},{"location":"DocumentationGenerator/#output-format","title":"Output Format","text":"<p>By default, documentation is generated in Markdown format. The output files are created in a <code>docs/</code> directory.</p>"},{"location":"DocumentationGenerator/#supported-tags","title":"Supported Tags","text":"<p>The documentation generator recognizes the following special tags:</p> <ul> <li><code>@param &lt;name&gt; &lt;description&gt;</code> - Documents a function parameter</li> <li><code>@return &lt;description&gt;</code> - Documents the return value</li> <li><code>@author &lt;name&gt;</code> - Specifies the author of the code</li> <li><code>@field &lt;name&gt; &lt;description&gt;</code> - Documents a struct field</li> <li><code>@value &lt;name&gt; &lt;description&gt;</code> - Documents an enum value</li> </ul>"},{"location":"DocumentationGenerator/#example","title":"Example","text":"<p>Here's an example of a well-documented function:</p> <pre><code>/## Calculates the factorial of a number.\n# This function uses recursion to calculate the factorial.\n#\n# @param n The number to calculate the factorial of\n# @return The factorial of n\n# @author Hussein Abdul-Ameer\n##/\nfunction factorial(n) {\n    if (n &lt;= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n</code></pre> <p>The generated documentation would include:</p> <ul> <li>Function name and description</li> <li>Parameter details</li> <li>Return value information</li> <li>Author attribution</li> </ul>"},{"location":"DocumentationGenerator/#library-documentation","title":"Library Documentation","text":"<p>When documenting libraries, use documentation comments for each namespace and function:</p> <pre><code>library MathUtils {\n    /## Provides advanced mathematical operations.\n    # This namespace contains functions for complex calculations.\n    # @author Hussein Abdul-Ameer\n    ##/\n    namespace advanced {\n        /## Calculates the factorial of a number.\n        # @param n The number to calculate the factorial of\n        # @return The factorial of n\n        ##/\n        function factorial(n) {\n            if (n &lt;= 1) {\n                return 1;\n            }\n            return n * factorial(n - 1);\n        }\n    }\n}\n</code></pre>"},{"location":"ErrorHandling/","title":"Error Handling in VG Language","text":"<p>VG Language provides mechanisms to handle errors and exceptions in your code.</p>"},{"location":"ErrorHandling/#try-catch-statements","title":"Try-Catch Statements","text":"<p>The try-catch statement allows you to handle errors gracefully:</p> <pre><code>try {\n    ## Code that might cause an error\n    var result = someRiskyOperation();\n} catch (error) {\n    ## Code to handle the error\n    print(\"An error occurred: \" + error);\n}\n</code></pre>"},{"location":"ErrorHandling/#throwing-errors","title":"Throwing Errors","text":"<p>You can throw your own errors using the <code>throw</code> statement:</p> <pre><code>function divide(a, b) {\n    if (b == 0) {\n        throw \"Division by zero is not allowed\";\n    }\n    return a / b;\n}\n</code></pre>"},{"location":"ErrorHandling/#error-types","title":"Error Types","text":"<p>VG Language has several built-in error types:</p> <ul> <li><code>VGTypeException</code> - Type-related errors (e.g., trying to perform arithmetic on a string)</li> <li><code>VGNameException</code> - Variable or function name errors (e.g., using an undefined variable)</li> <li><code>VGImportException</code> - Import-related errors (e.g., trying to import a non-existent library)</li> <li><code>VGException</code> - General runtime errors</li> </ul>"},{"location":"ErrorHandling/#example-handling-file-operations","title":"Example: Handling File Operations","text":"<pre><code>import IO.File;\n\ntry {\n    var content = File.readFile(\"nonexistent.txt\");\n    print(content);\n} catch (error) {\n    print(\"Could not read file: \" + error);\n}\n</code></pre>"},{"location":"ErrorHandling/#example-validating-user-input","title":"Example: Validating User Input","text":"<pre><code>import IO.Prompt;\n\nfunction getUserAge() {\n    try {\n        var input = Prompt.input(\"Enter your age: \");\n        var age = Integer.toInt(input);\n\n        if (age &lt; 0 || age &gt; 120) {\n            throw \"Age must be between 0 and 120\";\n        }\n\n        return age;\n    } catch (error) {\n        print(\"Invalid input: \" + error);\n        return getUserAge();  ## Try again\n    }\n}\n\nvar age = getUserAge();\nprint(\"Your age is: \" + age);\n</code></pre>"},{"location":"ErrorHandling/#finally-block","title":"Finally Block","text":"<p>The <code>finally</code> block contains code that will execute regardless of whether an exception was thrown or caught:</p> <pre><code>try {\n    ## Code that might throw an error\n    var file = openFile(\"data.txt\");\n    processFile(file);\n} catch (error) {\n    ## Handle the error\n    print(\"Error processing file: \" + error);\n} finally {\n    ## This code always runs\n    closeFile(file);\n}\n</code></pre>"},{"location":"ErrorHandling/#nested-try-catch-blocks","title":"Nested Try-Catch Blocks","text":"<p>You can nest try-catch blocks to handle different types of errors at different levels:</p> <pre><code>try {\n    try {\n        ## Risky operation\n        var data = fetchData();\n        processData(data);\n    } catch (dataError) {\n        ## Handle data-specific errors\n        print(\"Data error: \" + dataError);\n        useBackupData();\n    }\n\n    saveResults();\n} catch (error) {\n    ## Handle any other errors\n    print(\"Operation failed: \" + error);\n}\n</code></pre>"},{"location":"ErrorHandling/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Be Specific: Catch only the errors you can handle meaningfully.</p> </li> <li> <p>Provide Useful Error Messages: Include information about what went wrong and how to fix it.</p> </li> <li> <p>Clean Up Resources: Make sure to close files, database connections, etc., even when errors occur.</p> </li> <li> <p>Don't Overuse Try-Catch: Don't wrap everything in try-catch blocks; use them only where errors are likely or critical.</p> </li> <li> <p>Log Errors: For debugging purposes, log errors with relevant context information.</p> </li> </ol> <pre><code>try {\n    ## Risky operation\n} catch (error) {\n    ## Log the error with context\n    File.appendToFile(\"error.log\", \"Error at \" + DateTime.timestamp.currentTimeMillis() + \": \" + error);\n    ## Show a user-friendly message\n    print(\"An error occurred. Please try again later.\");\n}\n</code></pre>"},{"location":"ErrorHandling/#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"ErrorHandling/#division-by-zero","title":"Division by Zero","text":"<pre><code>function safeDivide(a, b) {\n    try {\n        if (b == 0) {\n            throw \"Division by zero\";\n        }\n        return a / b;\n    } catch (error) {\n        print(\"Error: \" + error);\n        return null;\n    }\n}\n</code></pre>"},{"location":"ErrorHandling/#array-index-out-of-bounds","title":"Array Index Out of Bounds","text":"<pre><code>function getArrayElement(array, index) {\n    try {\n        if (index &lt; 0 || index &gt;= array.length) {\n            throw \"Index out of bounds: \" + index;\n        }\n        return array[index];\n    } catch (error) {\n        print(\"Error: \" + error);\n        return null;\n    }\n}\n</code></pre>"},{"location":"ErrorHandling/#type-conversion-errors","title":"Type Conversion Errors","text":"<pre><code>function parseInteger(str) {\n    try {\n        return Integer.toInt(str);\n    } catch (error) {\n        print(\"Could not convert '\" + str + \"' to an integer\");\n        return 0;\n    }\n}\n</code></pre>"},{"location":"ErrorHandling/#error-handling-in-gui-applications","title":"Error Handling in GUI Applications","text":"<p>In GUI applications, it's important to show user-friendly error messages:</p> <pre><code>import Guilibrary.window;\n\ntry {\n    ## Perform operation that might fail\n    saveUserData(userData);\n} catch (error) {\n    ## Show error dialog to user\n    window.showErrorPopup(mainWindow, \"Save Failed\", \"Could not save user data: \" + error);\n}\n</code></pre>"},{"location":"Expressions/","title":"Expressions in VG Language","text":"<p>Expressions form the building blocks of VG Language, including: - Arithmetic operations (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>) - Logical operations (<code>&amp;&amp;</code>, <code>||</code>, <code>!</code>) - Comparisons (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>)</p> <p>Example: <pre><code>var result = (10 + 5) * 2;\nprint(result);  ## Output: 30\n</code></pre></p>"},{"location":"Functions/","title":"Functions in VG Language","text":"<p>Functions allow you to group code that performs a specific task. They can take parameters and return values.</p>"},{"location":"Functions/#defining-functions","title":"Defining Functions","text":"<p>To define a function, use the <code>function</code> keyword followed by the function name and parameters:</p> <pre><code>function add(a, b) {\n    return a + b;\n}\n</code></pre>"},{"location":"Functions/#calling-functions","title":"Calling Functions","text":"<p>To call a function, use its name followed by parentheses containing any arguments:</p> <pre><code>var result = add(5, 3);\nprint(result);  ## Output: 8\n</code></pre>"},{"location":"Functions/#return-statement","title":"Return Statement","text":"<p>The <code>return</code> statement specifies the value to be returned from a function:</p> <pre><code>function multiply(a, b) {\n    return a * b;\n}\n\nvar product = multiply(4, 5);  ## Product = 20\n</code></pre> <p>Functions without a <code>return</code> statement or with an empty <code>return</code> statement return <code>null</code>.</p>"},{"location":"Functions/#parameters","title":"Parameters","text":"<p>Functions can have multiple parameters, separated by commas:</p> <pre><code>function greet(firstName, lastName, age) {\n    return \"Hello, \" + firstName + \" \" + lastName + \"! You are \" + age + \" years old.\";\n}\n\nvar greeting = greet(\"John\", \"Doe\", 30);\n</code></pre>"},{"location":"Functions/#function-documentation","title":"Function Documentation","text":"<p>You can document your functions using special comment blocks:</p> <pre><code>/## Calculates the sum of two numbers\n# @param a The first number\n# @param b The second number\n# @return The sum of a and b\n# @author John Doe\n##/\nfunction add(a, b) {\n    return a + b;\n}\n</code></pre>"},{"location":"Functions/#functions-in-libraries","title":"Functions in Libraries","text":"<p>Functions can be organized into libraries and namespaces:</p> <pre><code>library MathUtils {\n    namespace basic {\n        function add(a, b) {\n            return a + b;\n        }\n\n        function subtract(a, b) {\n            return a - b;\n        }\n    }\n}\n</code></pre> <p>To use these functions, import them:</p> <pre><code>import MathUtils.basic;\n\nvar sum = basic.add(5, 3);\n</code></pre>"},{"location":"Functions/#recursive-functions","title":"Recursive Functions","text":"<p>Functions can call themselves (recursion):</p> <pre><code>function factorial(n) {\n    if (n &lt;= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nvar result = factorial(5);  ## result = 120\n</code></pre>"},{"location":"Functions/#scope","title":"Scope","text":"<p>Variables declared inside a function are only accessible within that function:</p> <pre><code>function test() {\n    var localVar = 10;\n    print(localVar);  ## Works fine\n}\n\ntest();\nprint(localVar);  ## Error: localVar is not defined\n</code></pre> <p>However, functions can access variables from their containing scope:</p> <pre><code>var globalVar = 20;\n\nfunction test() {\n    print(globalVar);  ## Works fine, accesses the global variable\n}\n\ntest();\n</code></pre>"},{"location":"Functions/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use Descriptive Names: Choose function names that clearly describe what the function does.</p> </li> <li> <p>Keep Functions Small: Each function should do one thing and do it well.</p> </li> <li> <p>Document Your Functions: Use documentation comments to explain what the function does, its parameters, and return values.</p> </li> <li> <p>Avoid Side Effects: Functions should ideally not modify variables outside their scope.</p> </li> <li> <p>Return Early: Return as soon as you have the result to make your code more readable.</p> </li> </ol> <pre><code>function isEven(number) {\n    if (number % 2 == 0) {\n        return true;\n    }\n    return false;\n}\n</code></pre>"},{"location":"Installation/","title":"Installing VG Language","text":"<p>VG Language is easy to install on Windows. Follow the steps below to set up VG Language on your system.</p>"},{"location":"Installation/#windows-installation","title":"Windows Installation \ud83d\udda5\ufe0f","text":"<ol> <li>Download the VG Language installer</li> </ol> <p> 2. Run the installer (VGSetup.exe) and follow the on-screen instructions.</p> <ol> <li>If installed correctly, it will display the VG Language version.</li> </ol>"},{"location":"Installation/#important-running-vg-programs","title":"Important: Running VG Programs","text":"<p>Always run VG Language programs from a terminal (Command Prompt or PowerShell), not by directly clicking on the executable file.</p> <ol> <li>Open Command Prompt or PowerShell</li> <li>Navigate to your project directory using <code>cd</code> command</li> <li>Run a VG script: <pre><code>vg my_script.vg\n</code></pre></li> </ol> <p>This executes my_script.vg in the VG Language interpreter. Running from the terminal ensures that the packages directory is properly located and libraries can be loaded correctly.</p>"},{"location":"Introduction/","title":"Introduction","text":""},{"location":"Introduction/#overview","title":"overview","text":"<p>VG Language is designed for both beginners and experienced programmers. This guide will help you get started with the syntax, features, and usage. with the syntax, features, and usage.</p> <p>VG Language aims to provide a simple yet powerful syntax that enables developers to write clean and efficient code. Whether you are new to programming or transitioning from another language, this guide will cover the fundamental concepts you need to know.</p>"},{"location":"Introduction/#key-features","title":"Key Features","text":"<ul> <li>Simple Syntax \u2013 Easy-to-read structure with minimal complexity.</li> <li>Dynamic Typing \u2013 Supports flexible variable assignments.</li> <li>Control Structures \u2013 Includes loops, conditional statements, and functions.</li> <li>Data Structures \u2013 Offers arrays, dictionaries, and custom objects.</li> <li>Modular Design \u2013 Encourages reusable and maintainable code.</li> </ul>"},{"location":"Introduction/#getting-started","title":"Getting Started","text":"<ol> <li>Installation: Download and install the VG Language compiler or interpreter.</li> <li>Writing Code: Create a new file with the .vg extension and start coding.</li> <li>Running Code: </li> <li>Important: Always run VG programs using a terminal (Command Prompt or PowerShell), not by directly clicking on the executable.</li> <li>Open a terminal and navigate to your project directory.</li> <li>Use the command <code>vg yourfile.vg</code> to execute your script.</li> <li>This ensures that the packages directory is properly created and libraries can be loaded correctly.</li> </ol> <p>Example: <pre><code>print(\"Hello, World!\");  ##Output: Hello, World!\n</code></pre></p>"},{"location":"Libraries/","title":"Libraries in VG Language","text":"<p>VG Language comes with a rich set of built-in libraries that provide additional functionality for your programs.</p>"},{"location":"Libraries/#importing-libraries","title":"Importing Libraries","text":"<p>To use a library in your VG program, use the <code>import</code> statement:</p> <pre><code>import LibraryName.namespace;\n</code></pre> <p>You can import specific namespaces or functions from a library:</p> <pre><code>import MathLib.arithmetic;  ## Import the arithmetic namespace\nimport Guilibrary.window.create;  ## Import a specific function\n</code></pre>"},{"location":"Libraries/#standard-libraries","title":"Standard Libraries","text":""},{"location":"Libraries/#mathlib","title":"MathLib","text":"<p>Mathematical functions and constants.</p>"},{"location":"Libraries/#namespace-arithmetic","title":"Namespace: arithmetic","text":"<p>Functions for basic arithmetic operations.</p> Function Description Parameters Return Value Example <code>add(a, b)</code> Adds two numbers <code>a</code>: First number<code>b</code>: Second number Sum of a and b <code>arithmetic.add(5, 10)</code> \u2192 <code>15</code> <code>subtract(a, b)</code> Subtracts second number from first <code>a</code>: First number<code>b</code>: Second number Difference of a and b <code>arithmetic.subtract(20, 5)</code> \u2192 <code>15</code> <code>multiply(a, b)</code> Multiplies two numbers <code>a</code>: First number<code>b</code>: Second number Product of a and b <code>arithmetic.multiply(4, 3)</code> \u2192 <code>12</code> <code>divide(a, b)</code> Divides first number by second <code>a</code>: First number<code>b</code>: Second number Quotient of a and b <code>arithmetic.divide(10, 2)</code> \u2192 <code>5</code> <code>abs(x)</code> Gets absolute value <code>x</code>: Number Absolute value of x <code>arithmetic.abs(-15)</code> \u2192 <code>15</code>"},{"location":"Libraries/#namespace-constants","title":"Namespace: constants","text":"<p>Mathematical constants.</p> Constant Description Return Value Example <code>pi()</code> Returns the value of \u03c0 Approximately 3.14159 <code>constants.pi()</code> \u2192 <code>3.14159...</code> <code>e()</code> Returns the value of e Approximately 2.71828 <code>constants.e()</code> \u2192 <code>2.71828...</code>"},{"location":"Libraries/#usage-example","title":"Usage Example","text":"<pre><code>import MathLib.arithmetic;\nimport MathLib.constants;\n\nvar pi = constants.pi();\nvar sum = arithmetic.add(5, 10);\nvar difference = arithmetic.subtract(20, 5);\nvar product = arithmetic.multiply(4, 3);\nvar quotient = arithmetic.divide(10, 2);\nvar absoluteValue = arithmetic.abs(-15);\n</code></pre>"},{"location":"Libraries/#guilibrary","title":"Guilibrary","text":"<p>GUI components for creating graphical applications.</p>"},{"location":"Libraries/#namespace-window","title":"Namespace: window","text":"<p>Functions for creating and managing windows.</p> Function Description Parameters Return Value Example <code>create(title, width, height)</code> Creates a new window <code>title</code>: Window title<code>width</code>: Window width<code>height</code>: Window height Window object <code>window.create(\"My App\", 800, 600)</code> <code>setBackgroundColor(window, color)</code> Sets window background color <code>window</code>: Window object<code>color</code>: Color (hex code) None <code>window.setBackgroundColor(gameWindow, \"#87CEEB\")</code> <code>addComponentToWindow(window, component)</code> Adds a component to window <code>window</code>: Window object<code>component</code>: UI component None <code>window.addComponentToWindow(gameWindow, image)</code> <code>launch(window)</code> Displays the window <code>window</code>: Window object None <code>window.launch(gameWindow)</code>"},{"location":"Libraries/#namespace-image","title":"Namespace: Image","text":"<p>Functions for creating and manipulating images.</p> Function Description Parameters Return Value Example <code>createImage(path, x, y, width, height)</code> Creates an image component <code>path</code>: Image file path<code>x</code>: X position<code>y</code>: Y position<code>width</code>: Width<code>height</code>: Height Image object <code>Image.createImage(\"logo.png\", 100, 100, 200, 200)</code>"},{"location":"Libraries/#namespace-ioevents","title":"Namespace: IOEvents","text":"<p>Functions for handling user input events.</p> Function Description Parameters Return Value Example <code>setOnKeyPress(window, callback)</code> Sets key press event handler <code>window</code>: Window object<code>callback</code>: Function to call when key is pressed None See example below"},{"location":"Libraries/#namespace-sound","title":"Namespace: Sound","text":"<p>Functions for playing audio.</p> Function Description Parameters Return Value Example <code>playSound(path)</code> Plays a sound file <code>path</code>: Sound file path None <code>Sound.playSound(\"click.wav\")</code>"},{"location":"Libraries/#usage-example_1","title":"Usage Example","text":"<pre><code>import Guilibrary.window;\nimport Guilibrary.Image;\nimport Guilibrary.IOEvents;\nimport Guilibrary.Sound;\n\n## Create a window\nvar gameWindow = window.create(\"My Application\", 800, 600);\nwindow.setBackgroundColor(gameWindow, \"#87CEEB\");\n\n## Add components\nvar image = Image.createImage(\"assets/logo.png\", 100, 100, 200, 200);\nwindow.addComponentToWindow(gameWindow, image);\n\n## Set up event handling\nIOEvents.setOnKeyPress(gameWindow, function(key) {\n    if (key == \"SPACE\") {\n        Sound.playSound(\"assets/click.wav\");\n    }\n});\n\n## Display the window\nwindow.launch(gameWindow);\n</code></pre>"},{"location":"Libraries/#regexlib","title":"RegexLib","text":"<p>Regular expression operations.</p>"},{"location":"Libraries/#namespace-regex","title":"Namespace: regex","text":"<p>Functions for pattern matching and text manipulation.</p> Function Description Parameters Return Value Example <code>findAll(text, pattern)</code> Finds all matches of a pattern <code>text</code>: Input text<code>pattern</code>: Regex pattern Array of matches <code>regex.findAll(\"Hello world\", \"\\\\w+\")</code> <code>matches(text, pattern)</code> Checks if text matches pattern <code>text</code>: Input text<code>pattern</code>: Regex pattern Boolean <code>regex.matches(\"test@example.com\", \"^[\\\\w.]+@[\\\\w.]+\\\\.[a-z]{2,}$\")</code> <code>replaceAll(text, pattern, replacement)</code> Replaces all matches <code>text</code>: Input text<code>pattern</code>: Regex pattern<code>replacement</code>: Replacement text Modified text <code>regex.replaceAll(\"Hello world\", \"world\", \"universe\")</code>"},{"location":"Libraries/#usage-example_2","title":"Usage Example","text":"<pre><code>import RegexLib.regex;\n\n## Find all matches\nvar matches = regex.findAll(\"Hello world\", \"\\\\w+\");\n\n## Check if a string matches a pattern\nvar isMatch = regex.matches(\"test@example.com\", \"^[\\\\w.]+@[\\\\w.]+\\\\.[a-z]{2,}$\");\n\n## Replace text\nvar newText = regex.replaceAll(\"Hello world\", \"world\", \"universe\");\n</code></pre>"},{"location":"Libraries/#sqlitelib","title":"SQLiteLib","text":"<p>Database operations with SQLite.</p>"},{"location":"Libraries/#namespace-db","title":"Namespace: db","text":"<p>Functions for database operations.</p> Function Description Parameters Return Value Example <code>openDB(path)</code> Opens or creates a database <code>path</code>: Database file path Database connection <code>db.openDB(\"mydata.db\")</code> <code>runStatement(db, sql)</code> Executes SQL statement <code>db</code>: Database connection<code>sql</code>: SQL statement None <code>db.runStatement(database, \"CREATE TABLE users (id INTEGER, name TEXT)\")</code> <code>runQuery(db, sql)</code> Executes SQL query <code>db</code>: Database connection<code>sql</code>: SQL query Query results <code>db.runQuery(database, \"SELECT * FROM users\")</code> <code>closeDB(db)</code> Closes database connection <code>db</code>: Database connection None <code>db.closeDB(database)</code>"},{"location":"Libraries/#usage-example_3","title":"Usage Example","text":"<pre><code>import SQLiteLib.db;\n\n## Open or create a database\nvar database = db.openDB(\"mydata.db\");\n\n## Create a table\ndb.runStatement(database, \"CREATE TABLE IF NOT EXISTS users (id INTEGER, name TEXT)\");\n\n## Insert data\ndb.runStatement(database, \"INSERT INTO users VALUES (1, 'John')\");\n\n## Query data\nvar results = db.runQuery(database, \"SELECT * FROM users\");\nprint(results);\n\n## Close the database\ndb.closeDB(database);\n</code></pre>"},{"location":"Libraries/#datetime","title":"DateTime","text":"<p>Date and time functions.</p>"},{"location":"Libraries/#namespace-timestamp","title":"Namespace: timestamp","text":"<p>Functions for working with timestamps.</p> Function Description Parameters Return Value Example <code>currentTimeMillis()</code> Gets current time in milliseconds None Current timestamp <code>timestamp.currentTimeMillis()</code>"},{"location":"Libraries/#namespace-date","title":"Namespace: date","text":"<p>Functions for working with dates.</p> Function Description Parameters Return Value Example <code>getYear()</code> Gets current year None Current year <code>date.getYear()</code> <code>getMonth()</code> Gets current month None Current month (1-12) <code>date.getMonth()</code> <code>getDay()</code> Gets current day None Current day of month <code>date.getDay()</code>"},{"location":"Libraries/#namespace-time","title":"Namespace: time","text":"<p>Functions for working with time.</p> Function Description Parameters Return Value Example <code>getHour()</code> Gets current hour None Current hour (0-23) <code>time.getHour()</code> <code>getMinute()</code> Gets current minute None Current minute (0-59) <code>time.getMinute()</code> <code>getSecond()</code> Gets current second None Current second (0-59) <code>time.getSecond()</code>"},{"location":"Libraries/#usage-example_4","title":"Usage Example","text":"<pre><code>import DateTime.timestamp;\nimport DateTime.date;\nimport DateTime.time;\n\n## Get current timestamp\nvar now = timestamp.currentTimeMillis();\n\n## Get date components\nvar year = date.getYear();\nvar month = date.getMonth();\nvar day = date.getDay();\n\n## Get time components\nvar hour = time.getHour();\nvar minute = time.getMinute();\nvar second = time.getSecond();\n</code></pre>"},{"location":"Libraries/#io","title":"IO","text":"<p>File and console input/output operations.</p>"},{"location":"Libraries/#namespace-file","title":"Namespace: File","text":"<p>Functions for file operations.</p> Function Description Parameters Return Value Example <code>readFile(path)</code> Reads file contents <code>path</code>: File path File contents as string <code>File.readFile(\"input.txt\")</code> <code>writeFile(path, content)</code> Writes to a file <code>path</code>: File path<code>content</code>: Content to write None <code>File.writeFile(\"output.txt\", \"Hello, world!\")</code> <code>appendToFile(path, content)</code> Appends to a file <code>path</code>: File path<code>content</code>: Content to append None <code>File.appendToFile(\"log.txt\", \"Program executed\")</code>"},{"location":"Libraries/#namespace-prompt","title":"Namespace: Prompt","text":"<p>Functions for user input.</p> Function Description Parameters Return Value Example <code>input(prompt)</code> Gets user input <code>prompt</code>: Text to display User input as string <code>Prompt.input(\"Enter your name: \")</code>"},{"location":"Libraries/#usage-example_5","title":"Usage Example","text":"<pre><code>import IO.File;\nimport IO.Prompt;\n\n## Read user input\nvar name = Prompt.input(\"Enter your name: \");\nprint(\"Hello, \" + name);\n\n## File operations\nFile.writeFile(\"output.txt\", \"Hello, world!\");\nvar content = File.readFile(\"input.txt\");\nFile.appendToFile(\"log.txt\", \"Program executed at \" + DateTime.timestamp.currentTimeMillis());\n</code></pre>"},{"location":"Libraries/#oslib","title":"OSLib","text":"<p>Operating system information and environment variables.</p>"},{"location":"Libraries/#namespace-sys","title":"Namespace: sys","text":"<p>Functions for system information.</p> Function Description Parameters Return Value Example <code>getOSName()</code> Gets operating system name None OS name as string <code>sys.getOSName()</code> <code>getUserHome()</code> Gets user home directory None Path as string <code>sys.getUserHome()</code> <code>getUserDir()</code> Gets current directory None Path as string <code>sys.getUserDir()</code> <code>getEnv(name)</code> Gets environment variable <code>name</code>: Variable name Variable value <code>sys.getEnv(\"PATH\")</code>"},{"location":"Libraries/#usage-example_6","title":"Usage Example","text":"<pre><code>import OSLib.sys;\n\n## Get OS information\nvar osName = sys.getOSName();\nprint(\"Running on: \" + osName);\n\n## Get environment variables\nvar homePath = sys.getUserHome();\nvar currentDir = sys.getUserDir();\nvar envVar = sys.getEnv(\"PATH\");\n</code></pre>"},{"location":"Libraries/#arrays","title":"Arrays","text":"<p>Array manipulation utilities.</p>"},{"location":"Libraries/#namespace-array","title":"Namespace: array","text":"<p>Functions for working with arrays.</p> Function Description Parameters Return Value Example <code>getLength(arr)</code> Gets array length <code>arr</code>: Array Length as integer <code>array.getLength(myArray)</code> <code>push(arr, item)</code> Adds item to end of array <code>arr</code>: Array<code>item</code>: Item to add Modified array <code>array.push(myArray, 4)</code> <code>pop(arr)</code> Removes last item from array <code>arr</code>: Array Removed item <code>array.pop(myArray)</code> <code>unshift(arr, item)</code> Adds item to start of array <code>arr</code>: Array<code>item</code>: Item to add Modified array <code>array.unshift(myArray, 0)</code> <code>shift(arr)</code> Removes first item from array <code>arr</code>: Array Removed item <code>array.shift(myArray)</code>"},{"location":"Libraries/#usage-example_7","title":"Usage Example","text":"<pre><code>import Arrays.array;\n\n## Create an array\nvar myArray = [1, 2, 3];\n\n## Get array length\nvar length = array.getLength(myArray);\n\n## Modify arrays\narray.push(myArray, 4);  ## Add to end: [1, 2, 3, 4]\nvar lastItem = array.pop(myArray);  ## Remove from end: [1, 2, 3]\narray.unshift(myArray, 0);  ## Add to beginning: [0, 1, 2, 3]\nvar firstItem = array.shift(myArray);  ## Remove from beginning: [1, 2, 3]\n</code></pre>"},{"location":"Libraries/#util","title":"Util","text":"<p>Utility functions for type conversion and string operations.</p>"},{"location":"Libraries/#namespace-type","title":"Namespace: Type","text":"<p>Functions for type checking.</p> Function Description Parameters Return Value Example <code>getType(value)</code> Gets type of a value <code>value</code>: Any value Type as string <code>Type.getType(\"Hello\")</code> \u2192 <code>\"string\"</code>"},{"location":"Libraries/#namespace-string","title":"Namespace: String","text":"<p>Functions for string operations.</p> Function Description Parameters Return Value Example <code>toString(value)</code> Converts value to string <code>value</code>: Any value String representation <code>String.toString(123)</code> \u2192 <code>\"123\"</code> <code>stringLength(str)</code> Gets string length <code>str</code>: String Length as integer <code>String.stringLength(\"Hello\")</code> \u2192 <code>5</code> <code>indexOf(str, substr)</code> Finds position of substring <code>str</code>: String<code>substr</code>: Substring to find Position as integer <code>String.indexOf(\"Hello World\", \"World\")</code> \u2192 <code>6</code> <code>substring(str, start, end)</code> Extracts part of string <code>str</code>: String<code>start</code>: Start index<code>end</code>: End index Substring <code>String.substring(\"Hello World\", 0, 5)</code> \u2192 <code>\"Hello\"</code> <code>toUpper(str)</code> Converts string to uppercase <code>str</code>: String Uppercase string <code>String.toUpper(\"hello\")</code> \u2192 <code>\"HELLO\"</code>"},{"location":"Libraries/#namespace-integer","title":"Namespace: Integer","text":"<p>Functions for integer operations.</p> Function Description Parameters Return Value Example <code>toInt(str)</code> Converts string to integer <code>str</code>: String Integer value <code>Integer.toInt(\"42\")</code> \u2192 <code>42</code>"},{"location":"Libraries/#namespace-double","title":"Namespace: Double","text":"<p>Functions for double operations.</p> Function Description Parameters Return Value Example <code>toDouble(str)</code> Converts string to double <code>str</code>: String Double value <code>Double.toDouble(\"3.14\")</code> \u2192 <code>3.14</code>"},{"location":"Libraries/#namespace-boolean","title":"Namespace: Boolean","text":"<p>Functions for boolean operations.</p> Function Description Parameters Return Value Example <code>toBoolean(str)</code> Converts string to boolean <code>str</code>: String Boolean value <code>Boolean.toBoolean(\"true\")</code> \u2192 <code>true</code>"},{"location":"Libraries/#usage-example_8","title":"Usage Example","text":"<pre><code>import Util.Type;\nimport Util.String;\nimport Util.Integer;\nimport Util.Double;\nimport Util.Boolean;\n\n## Type checking\nvar type = Type.getType(\"Hello\");  ## Returns \"string\"\n\n## Type conversion\nvar intValue = Integer.toInt(\"42\");\nvar doubleValue = Double.toDouble(\"3.14\");\nvar boolValue = Boolean.toBoolean(\"true\");\nvar strValue = String.toString(123);\n\n## String operations\nvar length = String.stringLength(\"Hello\");\nvar position = String.indexOf(\"Hello World\", \"World\");\nvar part = String.substring(\"Hello World\", 0, 5);\nvar upper = String.toUpper(\"hello\");\n</code></pre>"},{"location":"Libraries/#random","title":"Random","text":"<p>Random number generation.</p>"},{"location":"Libraries/#namespace-number","title":"Namespace: number","text":"<p>Functions for generating random numbers.</p> Function Description Parameters Return Value Example <code>getRandomInt(min, max)</code> Generates random integer <code>min</code>: Minimum value<code>max</code>: Maximum value Random integer <code>number.getRandomInt(1, 100)</code> <code>getRandomDouble(min, max)</code> Generates random double <code>min</code>: Minimum value<code>max</code>: Maximum value Random double <code>number.getRandomDouble(0, 1)</code>"},{"location":"Libraries/#usage-example_9","title":"Usage Example","text":"<pre><code>import Random.number;\n\n## Generate random numbers\nvar randomInt = number.getRandomInt(1, 100);  ## Random integer between 1 and 100\nvar randomDouble = number.getRandomDouble(0, 1);  ## Random double between 0 and 1\n</code></pre>"},{"location":"Libraries/#creating-custom-libraries","title":"Creating Custom Libraries","text":"<p>You can create your own libraries using the <code>library</code> keyword:</p> <pre><code>library MyLibrary {\n    namespace utils {\n        function greet(name) {\n            return \"Hello, \" + name + \"!\";\n        }\n\n        function farewell(name) {\n            return \"Goodbye, \" + name + \"!\";\n        }\n    }\n\n    namespace math {\n        function square(x) {\n            return x * x;\n        }\n    }\n}\n</code></pre> <p>Save this code in a file with the <code>.vglib</code> extension in the <code>libraries</code> or <code>projects/packages</code> directory to make it available for import in your VG programs.</p>"},{"location":"Libraries/#library-documentation","title":"Library Documentation","text":"<p>When creating libraries, it's good practice to document your functions using documentation comments:</p> <pre><code>library MyLibrary {\n    /## Utility functions for common operations\n    # This namespace contains helper functions for everyday tasks.\n    # @author Your Name\n    ##/\n    namespace utils {\n        /## Greets a person by name\n        # @param name The name of the person to greet\n        # @return A greeting message\n        ##/\n        function greet(name) {\n            return \"Hello, \" + name + \"!\";\n        }\n    }\n}\n</code></pre>"},{"location":"Libraries/#system-calls-in-libraries","title":"System Calls in Libraries","text":"<p>Libraries often use system calls to access Java functionality. These calls are restricted to a whitelist of allowed classes and methods defined in the configuration file.</p> <pre><code>## Example of a system call in a library function\nfunction currentTimeMillis() {\n    return VgSystemCall(\"java.lang.System\", \"currentTimeMillis\");\n}\n</code></pre>"},{"location":"Libraries/#library-namespaces","title":"Library Namespaces","text":"<p>Libraries can contain multiple namespaces to organize related functionality:</p> <pre><code>library MyLibrary {\n    namespace math {\n        ## Math-related functions\n    }\n\n    namespace string {\n        ## String manipulation functions\n    }\n\n    namespace file {\n        ## File handling functions\n    }\n}\n</code></pre> <p>To use functions from different namespaces, import each namespace separately:</p> <pre><code>import MyLibrary.math;\nimport MyLibrary.string;\n\nvar squared = math.square(5);\nvar reversed = string.reverse(\"Hello\");\n</code></pre>"},{"location":"PackageManager/","title":"Package Manager","text":"<p>VG Language includes a package manager (<code>vgpkg</code>) that allows you to install, remove, and manage libraries.</p>"},{"location":"PackageManager/#basic-commands","title":"Basic Commands","text":""},{"location":"PackageManager/#installing-a-package","title":"Installing a Package","text":"<pre><code>vgpkg install &lt;PackageName&gt;\n</code></pre> <p>Example: <pre><code>vgpkg install mathlib\n</code></pre></p>"},{"location":"PackageManager/#removing-a-package","title":"Removing a Package","text":"<pre><code>vgpkg remove &lt;PackageName&gt;\n</code></pre> <p>Example: <pre><code>vgpkg remove mathlib\n</code></pre></p>"},{"location":"PackageManager/#listing-installed-packages","title":"Listing Installed Packages","text":"<pre><code>vgpkg list\n</code></pre> <p>This command displays all currently installed packages and their versions.</p>"},{"location":"PackageManager/#viewing-available-packages","title":"Viewing Available Packages","text":"<pre><code>vgpkg available\n</code></pre> <p>This command shows all packages available in the official repository.</p>"},{"location":"PackageManager/#package-repository","title":"Package Repository","text":"<p>Packages are fetched from the official VG Language package repository at: <code>https://github.com/Husseinabdulameer11/vg-lang-packagemanager</code></p> <p>The repository contains a <code>packages.json</code> file that lists all available packages, their versions, and download URLs.</p>"},{"location":"PackageManager/#package-installation-location","title":"Package Installation Location","text":"<p>Installed packages are stored in the <code>packages/</code> directory of your VG Language installation. Each package is stored as a <code>.vglib</code> file that can be imported into your programs.</p> <p>The <code>packages/</code> directory is automatically created if it doesn't exist when: - Running a VG program - Installing a package - Using any package manager commands</p>"},{"location":"PackageManager/#custom-package-location","title":"Custom Package Location","text":"<pre><code>vgpkg install mathlib \n</code></pre>"},{"location":"PackageManager/#creating-your-own-packages","title":"Creating Your Own Packages","text":"<p>You can create your own packages by:</p> <ol> <li>Creating a <code>.vglib</code> file with your library code</li> <li>Adding it to the <code>packages/</code> directory manually, or</li> <li>Submitting it to the official repository for others to use</li> </ol>"},{"location":"PackageManager/#package-dependencies","title":"Package Dependencies","text":"<p>When installing a package, any dependencies it requires will be automatically installed as well. </p>"},{"location":"Statements/","title":"Statements","text":"<p>VG Language consists of statements, which include:</p> <ul> <li>Variable declarations</li> <li>Constants</li> <li>Arrays</li> <li>Assignments</li> <li>Print statements</li> <li>Conditional statements</li> <li>Loops</li> <li>Functions</li> <li>Try-Catch statements</li> </ul>"},{"location":"StructsAndEnums/","title":"Structs and Enums in VG Language","text":""},{"location":"StructsAndEnums/#structs","title":"Structs","text":"<p>Structs allow you to create custom data types with named fields.</p>"},{"location":"StructsAndEnums/#defining-a-struct","title":"Defining a Struct","text":"<pre><code>struct Person {\n    name,\n    age,\n    email\n}\n</code></pre>"},{"location":"StructsAndEnums/#creating-struct-instances","title":"Creating Struct Instances","text":"<pre><code>var john = Person{\n    name: \"John Doe\",\n    age: 30,\n    email: \"john@example.com\"\n};\n</code></pre>"},{"location":"StructsAndEnums/#accessing-struct-fields","title":"Accessing Struct Fields","text":"<pre><code>print(john.name);  ## Output: John Doe\nprint(john.age);   ## Output: 30\n</code></pre>"},{"location":"StructsAndEnums/#modifying-struct-fields","title":"Modifying Struct Fields","text":"<pre><code>john.age = 31;\nprint(john.age);   ## Output: 31\n</code></pre>"},{"location":"StructsAndEnums/#struct-documentation","title":"Struct Documentation","text":"<p>You can document structs using special comment blocks:</p> <pre><code>/## Represents a person with basic information\n# @field name The person's full name\n# @field age The person's age in years\n# @field email The person's email address\n# @author Hussein Abdul-Ameer\n##/\nstruct Person {\n    name,\n    age,\n    email\n}\n</code></pre>"},{"location":"StructsAndEnums/#enums","title":"Enums","text":"<p>Enums define a set of named constants.</p>"},{"location":"StructsAndEnums/#defining-an-enum","title":"Defining an Enum","text":"<pre><code>enum Color {\n    RED,\n    GREEN,\n    BLUE\n}\n</code></pre>"},{"location":"StructsAndEnums/#using-enum-values","title":"Using Enum Values","text":"<pre><code>var selectedColor = Color.RED;\n\nif (selectedColor == Color.RED) {\n    print(\"The color is red\");\n}\n</code></pre>"},{"location":"StructsAndEnums/#enums-with-custom-values","title":"Enums with Custom Values","text":"<p>You can assign specific values to enum constants:</p> <pre><code>enum HttpStatus {\n    OK = 200,\n    NOT_FOUND = 404,\n    SERVER_ERROR = 500\n}\n\nprint(HttpStatus.NOT_FOUND);  ## Output: 404\n</code></pre>"},{"location":"StructsAndEnums/#enum-documentation","title":"Enum Documentation","text":"<p>You can document enums using special comment blocks:</p> <pre><code>/## HTTP status codes\n# @value OK Successful response (200)\n# @value NOT_FOUND Resource not found (404)\n# @value SERVER_ERROR Internal server error (500)\n# @author Hussein Abdul-Ameer\n##/\nenum HttpStatus {\n    OK = 200,\n    NOT_FOUND = 404,\n    SERVER_ERROR = 500\n}\n</code></pre>"},{"location":"StructsAndEnums/#using-structs-and-enums-together","title":"Using Structs and Enums Together","text":"<p>Structs can contain enum fields:</p> <pre><code>enum UserRole {\n    ADMIN,\n    EDITOR,\n    VIEWER\n}\n\nstruct User {\n    username,\n    role,\n    active\n}\n\nvar user = User{\n    username: \"admin\",\n    role: UserRole.ADMIN,\n    active: true\n};\n\nif (user.role == UserRole.ADMIN) {\n    print(user.username + \" has admin privileges\");\n}\n</code></pre>"},{"location":"StructsAndEnums/#arrays-of-structs","title":"Arrays of Structs","text":"<p>You can create arrays of struct instances:</p> <pre><code>var users = [\n    Person{name: \"Alice\", age: 25, email: \"alice@example.com\"},\n    Person{name: \"Bob\", age: 30, email: \"bob@example.com\"},\n    Person{name: \"Charlie\", age: 35, email: \"charlie@example.com\"}\n];\n\nfor (var i = 0; i &lt; 3; i = i + 1) {\n    print(users[i].name + \" is \" + users[i].age + \" years old\");\n}\n</code></pre>"},{"location":"StructsAndEnums/#practical-examples","title":"Practical Examples","text":""},{"location":"StructsAndEnums/#game-character-example","title":"Game Character Example","text":"<pre><code>enum CharacterClass {\n    WARRIOR,\n    MAGE,\n    ARCHER\n}\n\nstruct GameCharacter {\n    name,\n    class,\n    level,\n    health,\n    mana\n}\n\nvar player = GameCharacter{\n    name: \"Aragorn\",\n    class: CharacterClass.WARRIOR,\n    level: 10,\n    health: 100,\n    mana: 20\n};\n\nprint(\"Player \" + player.name + \" is a level \" + player.level + \" warrior\");\n</code></pre>"},{"location":"StructsAndEnums/#configuration-settings-example","title":"Configuration Settings Example","text":"<pre><code>enum LogLevel {\n    DEBUG = 0,\n    INFO = 1,\n    WARNING = 2,\n    ERROR = 3\n}\n\nstruct AppConfig {\n    appName,\n    version,\n    logLevel,\n    maxUsers,\n    isDebugMode\n}\n\nvar config = AppConfig{\n    appName: \"MyApp\",\n    version: \"1.0.0\",\n    logLevel: LogLevel.INFO,\n    maxUsers: 100,\n    isDebugMode: false\n};\n\nif (config.logLevel &lt;= LogLevel.DEBUG) {\n    print(\"Debug logging is enabled\");\n}\n</code></pre>"},{"location":"SystemCalls/","title":"System Calls in VG Language","text":"<p>VG Language allows controlled access to Java methods through the <code>VgSystemCall</code> function. This feature enables interaction with the underlying Java platform while maintaining security through a whitelist mechanism.</p>"},{"location":"SystemCalls/#basic-usage","title":"Basic Usage","text":"<p>The general syntax for a system call is:</p> <pre><code>VgSystemCall(\"fully.qualified.ClassName\", \"methodName\", arg1, arg2, ...)\n</code></pre> <p>Examples:</p> <pre><code>## Get current time in milliseconds\nvar currentTime = VgSystemCall(\"java.lang.System\", \"currentTimeMillis\");\n\n## Parse a string to an integer\nvar number = VgSystemCall(\"java.lang.Integer\", \"parseInt\", \"42\");\n</code></pre>"},{"location":"SystemCalls/#security","title":"Security","text":"<p>System calls are restricted to a whitelist of allowed classes and methods defined in the configuration file (<code>Configuration/allowed_configurations.vgenv</code>). This ensures that VG programs can only access safe and approved functionality.</p> <p>Attempting to call a method that is not on the whitelist will result in a security exception.</p>"},{"location":"SystemCalls/#common-system-calls","title":"Common System Calls","text":""},{"location":"SystemCalls/#console-input","title":"Console Input","text":"<pre><code>## Create a Scanner object\nvar scanner = VgSystemCall(\"java.util.Scanner\", \"&lt;init&gt;\", VgSystemCall(\"components.IoUtils\", \"getSystemIn\"));\n\n## Read a line of input\nvar input = VgSystemCall(\"java.util.Scanner\", \"nextLine\", scanner);\n</code></pre>"},{"location":"SystemCalls/#file-operations","title":"File Operations","text":"<pre><code>## Read a file\nvar content = VgSystemCall(\"components.IoUtils\", \"readFile\", \"path/to/file.txt\");\n\n## Write to a file\nVgSystemCall(\"components.IoUtils\", \"writeFile\", \"path/to/file.txt\", \"Hello, world!\");\n\n## Append to a file\nVgSystemCall(\"components.IoUtils\", \"appendToFile\", \"path/to/file.txt\", \"More content\");\n</code></pre>"},{"location":"SystemCalls/#gui-operations","title":"GUI Operations","text":"<pre><code>## Create a window\nvar window = VgSystemCall(\"components.MyGUI\", \"&lt;init&gt;\", \"Window Title\", 800, 600);\n\n## Set background color\nVgSystemCall(\"components.MyGUI\", \"setWindowBackgroundColor\", window, VgSystemCall(\"java.awt.Color\", \"decode\", \"#87CEEB\"));\n\n## Show the window\nVgSystemCall(\"components.MyGUI\", \"launch\", window);\n</code></pre>"},{"location":"SystemCalls/#math-operations","title":"Math Operations","text":"<pre><code>## Get absolute value\nvar abs = VgSystemCall(\"java.lang.Math\", \"abs\", -10);\n\n## Get random number\nvar random = VgSystemCall(\"java.lang.Math\", \"random\");\n\n## Round a number\nvar rounded = VgSystemCall(\"java.lang.Math\", \"floor\", 3.7);\n</code></pre>"},{"location":"SystemCalls/#string-operations","title":"String Operations","text":"<pre><code>## Get string length\nvar length = VgSystemCall(\"components.Util\", \"stringLength\", \"Hello\");\n\n## Find substring position\nvar index = VgSystemCall(\"components.Util\", \"indexOfString\", \"Hello World\", \"World\");\n\n## Extract substring\nvar substring = VgSystemCall(\"components.Util\", \"substringString\", \"Hello World\", 0, 5);\n</code></pre>"},{"location":"SystemCalls/#type-conversion","title":"Type Conversion","text":"<pre><code>## Convert to integer\nvar intValue = VgSystemCall(\"components.Util\", \"toInt\", \"42\");\n\n## Convert to double\nvar doubleValue = VgSystemCall(\"components.Util\", \"toDouble\", \"3.14\");\n\n## Convert to string\nvar stringValue = VgSystemCall(\"components.Util\", \"toString\", 123);\n</code></pre>"},{"location":"SystemCalls/#using-system-calls-in-libraries","title":"Using System Calls in Libraries","text":"<p>System calls are commonly used in library implementations to provide a clean API for VG programs:</p> <pre><code>library MyLibrary {\n    namespace math {\n        function abs(x) {\n            return VgSystemCall(\"java.lang.Math\", \"abs\", x);\n        }\n\n        function random() {\n            return VgSystemCall(\"java.lang.Math\", \"random\");\n        }\n    }\n}\n</code></pre> <p>This allows users to call <code>MyLibrary.math.abs(-10)</code> instead of using the system call directly.</p>"},{"location":"SystemCalls/#constructor-calls","title":"Constructor Calls","text":"<p>To create a new instance of a Java class, use the special <code>&lt;init&gt;</code> method name:</p> <pre><code>## Create a new Date object\nvar date = VgSystemCall(\"java.util.Date\", \"&lt;init&gt;\");\n\n## Create a Timer with parameters\nvar timer = VgSystemCall(\"javax.swing.Timer\", \"&lt;init&gt;\", 1000, callbackFunction);\n</code></pre>"},{"location":"SystemCalls/#allowed-classes-and-methods","title":"Allowed Classes and Methods","text":"<p>For security reasons, only specific classes and methods are allowed. The complete list can be found in the <code>Configuration/allowed_configurations.vgenv</code> file.</p> <p>Some commonly used allowed classes include:</p> <ul> <li><code>java.lang.System</code> - For system operations</li> <li><code>java.util.Scanner</code> - For reading input</li> <li><code>java.lang.Integer</code>, <code>java.lang.Double</code> - For number parsing</li> <li><code>java.lang.String</code> - For string operations</li> <li><code>components.MyGUI</code> - For GUI operations</li> <li><code>java.lang.Math</code> - For mathematical operations</li> <li><code>components.ArrayUtils</code> - For array manipulation</li> <li><code>components.IoUtils</code> - For file operations</li> <li><code>components.SQLiteDB</code> - For database operations</li> <li><code>java.util.regex.Pattern</code> and <code>java.util.regex.Matcher</code> - For regular expressions</li> </ul>"},{"location":"SystemCalls/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use Libraries: Instead of using system calls directly in your code, use the provided libraries that wrap these calls.</p> </li> <li> <p>Error Handling: Always handle potential errors when making system calls, as they can throw exceptions.</p> </li> <li> <p>Security Awareness: Remember that system calls are restricted for security reasons. If you need additional functionality, consider requesting it to be added to the allowed configurations.</p> </li> <li> <p>Documentation: When creating libraries that use system calls, document the underlying Java methods being used.</p> </li> </ol>"},{"location":"SystemCalls/#example-creating-a-custom-system-call-wrapper","title":"Example: Creating a Custom System Call Wrapper","text":"<pre><code>function readUserInput(prompt) {\n    print(prompt);\n    var scanner = VgSystemCall(\"java.util.Scanner\", \"&lt;init&gt;\", VgSystemCall(\"components.IoUtils\", \"getSystemIn\"));\n    return VgSystemCall(\"java.util.Scanner\", \"nextLine\", scanner);\n}\n\n## Usage\nvar name = readUserInput(\"Enter your name: \");\nprint(\"Hello, \" + name);\n</code></pre>"},{"location":"Variables/","title":"Variables in VG Language","text":"<p>Variables are used to store data values. In VG Language, you can declare variables and assign them values.</p>"},{"location":"Variables/#declaring-variables","title":"Declaring Variables","text":"<p>To declare a variable, use the <code>var</code> keyword:</p> <pre><code>var x = 10;\nvar name = \"Alice\";\nvar isActive = true;\n</code></pre>"},{"location":"Variables/#variable-types","title":"Variable Types","text":"<p>VG Language supports various data types for variables:</p> <ul> <li>Integers: Whole numbers (e.g., 10, -5)</li> <li>Doubles: Decimal numbers (e.g., 3.14, -0.99)</li> <li>Strings: Text enclosed in double quotes (e.g., \"Hello, world!\")</li> <li>Booleans: true or false</li> <li>Arrays: A list of elements (e.g., [1, 2, 3], [\"a\", \"b\", \"c\"])</li> </ul>"},{"location":"Variables/#example","title":"Example","text":"<pre><code>var age = 25;         ## Integer\nvar temperature = 23.5;  ## Double\nvar greeting = \"Hello, VG!\"; ## String\nvar isActive = true;   ## Boolean\n</code></pre>"},{"location":"Variables/#updating-variables","title":"Updating Variables","text":"<pre><code>var x = 5;\nx = x + 3;  ## x is now 8\nprint(x);  ## Output: 8\n</code></pre>"},{"location":"do-while-loop/","title":"Do-While Loop in VG Language","text":"<p>The do-while loop in VG Language executes a block of code at least once, regardless of the condition. It checks the condition after executing the loop body, making it different from a regular while loop.</p> <pre><code>var x = 0;\ndo {\n    print(x);\n    x = x + 1;\n} while (x &lt; 5);\n</code></pre>"},{"location":"for-loop/","title":"For Loop in VG Language","text":"<p>A for loop is used when you know in advance how many times you want to execute a block of code. It consists of:</p> <ol> <li>Initialization \u2013 A variable is initialized before the loop starts.</li> <li>Condition \u2013 The loop runs as long as this condition is true.</li> <li>Update \u2013 The variable is updated after each iteration.</li> </ol>"},{"location":"for-loop/#basic-syntax","title":"Basic Syntax","text":"<pre><code>for (var i = 0; i &lt; 5; i = i + 1) {\n    print(i);\n}\n</code></pre>"},{"location":"if-statements/","title":"If Statements in VG Language","text":"<p>Used to execute code conditionally.</p> <pre><code>if (x &gt; 10) {\n    print(\"x is greater than 10\");\n} else {\n    print(\"x is 10 or less\");\n}\n</code></pre>"},{"location":"while-loop/","title":"While Loop in VG Language","text":"<p>A while loop repeatedly executes a block of code as long as a given condition evaluates to true. This is useful when the number of iterations is not known beforehand.</p> <pre><code>var x = 0;\nwhile (x &lt; 5) {\n    print(x);\n    x = x + 1;\n}\n</code></pre>"}]}